



<div class="mb-4">
    @if (!string.IsNullOrEmpty(Label))
    {
        <label class="block font-paragraph text-[16px] text-gray-700 mb-2">
            @Label @if (IsRequired) { <span class="text-red-500">*</span> }
        </label>
    }

    <div class="relative">
        @if (!string.IsNullOrEmpty(CountryCode))
        {
            <!-- Input with Country Code -->
            <div class="flex">
                <div class="bg-gray-200 px-3 py-3 rounded-l-lg border border-gray-300">
                    <span class="font-paragraph text-[16px] text-gray-700">@CountryCode</span>
                </div>
                <input type="@Type" 
                       value="@Value"
                       @onchange="@(async (e) => await ValueChanged.InvokeAsync(e.Value?.ToString() ?? ""))"
                       placeholder="@Placeholder"
                       maxlength="@(MaxLength > 0 ? MaxLength : null)"
                       required="@IsRequired"
                       class="flex-1 px-4 py-3 border border-gray-300 rounded-r-lg focus:outline-none focus:ring-2 focus:ring-blue-500 font-paragraph text-[16px]" />
            </div>
        }
        else
        {
            <!-- Regular Input -->
            <div class="relative">
                @if (!string.IsNullOrEmpty(Icon))
                {
                    <div class="absolute left-3 top-1/2 transform -translate-y-1/2">
                        <i class="fa-solid @Icon text-gray-400"></i>
                    </div>
                }
                
                <input type="@(ShowPasswordToggle && Type == "password" ? (showPassword ? "text" : "password") : Type)" 
                       value="@Value"
                       @onchange="@(async (e) => await ValueChanged.InvokeAsync(e.Value?.ToString() ?? ""))"
                       placeholder="@Placeholder"
                       maxlength="@(MaxLength > 0 ? MaxLength : null)"
                       required="@IsRequired"
                       class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 font-paragraph text-[16px] @(string.IsNullOrEmpty(Icon) ? "" : "pl-10") @(ShowPasswordToggle ? "pr-12" : "")" />
                
                @if (ShowPasswordToggle)
                {
                    <button type="button" @onclick="TogglePassword" class="absolute right-3 top-1/2 transform -translate-y-1/2">
                        <i class="fa-solid @(showPassword ? "fa-eye-slash" : "fa-eye") text-gray-500"></i>
                    </button>
                }
            </div>
        }
    </div>

    @if (!string.IsNullOrEmpty(ValidationMessage))
    {
        <p class="text-red-500 font-paragraph text-[14px] mt-1">@ValidationMessage</p>
    }
</div>

@code {
    [Parameter] public string Label { get; set; } = string.Empty;
    [Parameter] public string Placeholder { get; set; } = string.Empty;
    [Parameter] public string Value { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> ValueChanged { get; set; }
    [Parameter] public string Type { get; set; } = "text";
    [Parameter] public string Icon { get; set; } = string.Empty;
    [Parameter] public bool IsRequired { get; set; } = false;
    [Parameter] public int MaxLength { get; set; } = 0;
    [Parameter] public string ValidationMessage { get; set; } = string.Empty;
    [Parameter] public bool ShowPasswordToggle { get; set; } = false;
    [Parameter] public string CountryCode { get; set; } = string.Empty;

    private bool showPassword = false;

    private void TogglePassword()
    {
        showPassword = !showPassword;
    }
} 