@using CenterOfExcellence.Constants
@using CenterOfExcellence.Services
@using CenterOfExcellence.Components.Common.Buttons


<div class="max-w-7xl mx-auto p-6  ">
    <div class="mb-8">
        <h2 class="font-heading text-[35px] leading-heading text-gray-800 mb-2">Sample Registration</h2>
        <p class="font-paragraph text-[18px] leading-paragraph text-gray-600">Register new samples for testing and analysis</p>
    </div>

    <form @onsubmit="HandleSubmit" class="space-y-8">
        <!-- Client Information Section -->
        <div class=" rounded-lg p-6">
            <h3 class="font-subHeading text-[20px] leading-subHeading text-gray-800 mb-4">Client Information</h3>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <InputField 
                    Placeholder="Client Name" 
                    Value="@sample.ClientName" 
                    ValueChanged="@(value => sample.ClientName = value)" 
                    Type="text" 
                    MaxLength="100" />
                
                <InputField 
                    Placeholder="Client Email" 
                    Value="@sample.ClientEmail" 
                    ValueChanged="@(value => sample.ClientEmail = value)" 
                    Type="email" 
                    MaxLength="100" />
                
                <InputField 
                    Placeholder="Client Phone" 
                    Value="@sample.ClientPhone" 
                    ValueChanged="@(value => sample.ClientPhone = value)" 
                    Type="tel" 
                    CountryCode="+91" 
                    MaxLength="15" />
            </div>
        </div>

       
        <div class="rounded-lg p-6">
            <h3 class="font-subHeading text-[20px] leading-subHeading text-gray-800 mb-4">Sample Details</h3>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <!-- Sample Type Selection -->
                <div >
                    <label class="block font-paragraph text-[16px] text-gray-700 mb-2">Sample Type</label>
                    <select @bind="selectedSampleTypeCode" @bind:after="OnSampleTypeChanged" 
                            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 font-paragraph text-[16px]">
                        <option value="" class="font-paragraph text-[16px]">Select Sample Type</option>
                        @foreach (var sampleType in AppConstants.SampleManagement.SampleTypes)
                        {
                            <option value="@sampleType.Code" class="font-paragraph text-[16px]">@sampleType.Name - @sampleType.Description</option>
                        }
                    </select>
                </div>

                <!-- Date Received -->
                <div >
                    <label class="block font-paragraph text-[16px] text-gray-700 mb-2">Date Received</label>
                    <input type="date" @bind="sample.DateReceived" 
                           class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
                </div>

                <!-- Turnaround Time -->
                <div >
                    <label class="block font-paragraph text-[16px] text-gray-700 mb-2">Turnaround Time</label>
                    <select @bind="sample.TurnaroundTime" 
                            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 font-paragraph text-[16px]">
                        <option value="@TurnaroundType.Standard" class="font-paragraph text-[16px]">Standard (5-7 days)</option>
                        <option value="@TurnaroundType.Rush" class="font-paragraph text-[16px]">Rush (1-2 days)</option>
                    </select>
                </div>

                <!-- Notes -->
                <div>
                    <label class="block font-paragraph text-[16px] text-gray-700 mb-2">Notes (Optional)</label>
                    <textarea @bind="sample.Notes" 
                              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                              rows="2" 
                              placeholder="Additional notes about the sample..."></textarea>
                </div>
            </div>
        </div>

        <!-- Test Parameters Section -->
        <div class="bg-gray-50 rounded-lg p-6">
            <h3 class="font-subHeading text-[20px] leading-subHeading text-gray-800 mb-4">Test Parameters</h3>
            <p class="font-paragraph text-[16px] leading-paragraph text-gray-600 mb-4">Select the tests you want to perform on this sample</p>
            
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                @foreach (var test in availableTests)
                {
                    <div class="border border-gray-200 rounded-lg p-4 hover:border-blue-300 transition-colors">
                        <div class="flex items-start space-x-3">
                            <input type="checkbox" 
                                   @bind="test.IsSelected" 
                                   @bind:after="OnTestSelectionChanged"
                                   class="mt-1 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" />
                            <div class="flex-1">
                                <h4 class="font-paragraph text-[16px] font-medium text-gray-800">@test.Name</h4>
                                <p class="font-paragraph text-[14px] text-gray-600">@test.Description</p>
                                <div class="mt-2 flex justify-between items-center">
                                    <span class="font-paragraph text-[14px] text-gray-500">Method: @test.Method</span>
                                    <span class="font-paragraph text-[14px] font-medium text-green-600">₹@test.Price</span>
                                </div>
                                <div class="mt-1 font-paragraph text-[12px] text-gray-500">
                                    Turnaround: @test.TurnaroundTime days
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Summary Section -->
        @if (selectedTests.Any())
        {
            <div class="bg-blue-50 rounded-lg p-6">
                <h3 class="font-subHeading text-[20px] leading-subHeading text-gray-800 mb-4">Order Summary</h3>
                <div class="space-y-3">
                    @foreach (var test in selectedTests)
                    {
                        <div class="flex justify-between items-center">
                            <span class="font-paragraph text-[16px] text-gray-700">@test.Name</span>
                            <span class="font-paragraph text-[16px] font-medium text-gray-800">₹@test.Price</span>
                        </div>
                    }
                    <hr class="border-gray-300" />
                    <div class="flex justify-between items-center font-paragraph text-[18px] font-semibold">
                        <span>Total Amount</span>
                        <span class="text-blue-600">₹@totalAmount</span>
                    </div>
                </div>
            </div>
        }

        <!-- Submit Section -->
        <div class="flex justify-end space-x-4 pt-6 border-t">
            <CustomButton Text="Cancel" Variant="ButtonVariant.Secondary" Icon="fa-times" OnClick="HandleCancel" />
            <CustomButton Text="Register Sample" Variant="ButtonVariant.Primary" Icon="fa-save" OnClick="HandleSubmit" />
        </div>
    </form>
</div>

@code {
    private SampleData sample = new()
    {
        DateReceived = DateTime.Now,
        Status = SampleStatus.Received,
        TurnaroundTime = TurnaroundType.Standard
    };

    private string selectedSampleTypeCode = string.Empty;
    private List<TestParameterData> availableTests = new();
    private List<TestParameterData> selectedTests = new();
    private decimal totalAmount = 0;

    protected override void OnInitialized()
    {
        // Initialize available tests
        availableTests = AppConstants.SampleManagement.TestParameters.ToList();
    }

    private void OnSampleTypeChanged()
    {
        if (!string.IsNullOrEmpty(selectedSampleTypeCode))
        {
            var selectedType = AppConstants.SampleManagement.SampleTypes.FirstOrDefault(t => t.Code == selectedSampleTypeCode);
            if (selectedType != null)
            {
                sample.SampleType = selectedType;
            }
        }
    }

    private void OnTestSelectionChanged()
    {
        selectedTests = availableTests.Where(t => t.IsSelected).ToList();
        totalAmount = selectedTests.Sum(t => t.Price);
        StateHasChanged();
    }

    private async Task HandleSubmit()
    {
        if (ValidateForm())
        {
            // Generate Sample ID
            sample.SampleId = SampleIdGenerator.GenerateSampleId(sample.SampleType.Code);
            
            // Set selected test parameters
            sample.TestParameters = selectedTests.ToList();
            
            // Generate Barcode and QR Code (placeholder for now)
            sample.Barcode = $"BARCODE_{sample.SampleId}";
            sample.QRCode = $"https://yourlab.com/track/{sample.SampleId}";
            
            // Save to database/storage (placeholder)
            await SaveSample(sample);
            
            // Show success message
            await ShowSuccessMessage();
            
            // Reset form
            ResetForm();
        }
    }

    private void HandleCancel()
    {
        ResetForm();
    }

    private bool ValidateForm()
    {
        if (string.IsNullOrEmpty(sample.ClientName))
        {
            // Show error: Client name is required
            return false;
        }

        if (string.IsNullOrEmpty(sample.ClientEmail))
        {
            // Show error: Client email is required
            return false;
        }

        if (string.IsNullOrEmpty(selectedSampleTypeCode))
        {
            // Show error: Sample type is required
            return false;
        }

        if (!selectedTests.Any())
        {
            // Show error: At least one test parameter must be selected
            return false;
        }

        return true;
    }

    private async Task SaveSample(SampleData sample)
    {
        // Placeholder for database save
        await Task.Delay(1000); // Simulate async operation
        Console.WriteLine($"Sample saved: {sample.SampleId}");
    }

    private async Task ShowSuccessMessage()
    {
        // Placeholder for success message
        await Task.Delay(100);
        Console.WriteLine($"Sample registered successfully: {sample.SampleId}");
    }

    private void ResetForm()
    {
        sample = new SampleData
        {
            DateReceived = DateTime.Now,
            Status = SampleStatus.Received,
            TurnaroundTime = TurnaroundType.Standard
        };
        
        selectedSampleTypeCode = string.Empty;
        availableTests.ForEach(t => t.IsSelected = false);
        selectedTests.Clear();
        totalAmount = 0;
        
        StateHasChanged();
    }
} 